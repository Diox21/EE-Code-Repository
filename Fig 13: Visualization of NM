import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def f(x, y, z):
    return (4 - 2.1 * x**2 + x**4 / 3) * x**2 + x * y + (4 * y**2 - 4) * y**2 + z**2 + x * z + y * z

def newton_step(x, y, z):
    x_next = x - 0.1 * (2 * x - 1)  # Approximate partial derivative step
    y_next = y - 0.1 * (2 * y + 0.5)
    z_next = f(x_next, y_next, 1)
    print(f"Newton's Method Step: Moving from ({x}, {y}, {z}) to ({x_next}, {y_next}, {z_next})")
    return x_next, y_next, z_next

x_start, y_start, z_start = -1.1568, -0.8372, 2.3209  # "New Point"
x_next, y_next, z_next = newton_step(x_start, y_start, z_start)

x = np.linspace(-1.5, -0.8, 100)
y = np.linspace(-1.1, -0.5, 100)
X, Y = np.meshgrid(x, y)
Z = f(X, Y, 1)  # Fixed z = 1

min_idx = np.unravel_index(np.argmin(Z, axis=None), Z.shape)
x_min, y_min = X[min_idx], Y[min_idx]
z_min = Z[min_idx]  # Minimum function value

x_full = np.linspace(-2, 2, 100)
y_full = np.linspace(-2, 2, 100)
X_full, Y_full = np.meshgrid(x_full, y_full)
Z_surface_y_facing = np.clip(f(X_full, Y_full, 1), -1, 5)  # Using fixed z=1 and clipping the range for visualization

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

surface = ax.plot_surface(X_full, Y_full, Z_surface_y_facing, cmap='viridis', edgecolor='none', alpha=0.3)

ax.set_zlim(-1, 5)
ax.view_init(elev=30, azim=170)

ax.plot([-1.25], [-1], [3.6446], color='darkred', marker='o', markersize=8, label="Initial Point (-1.25, -1, 3.6446)")
ax.plot([-1.1568], [-0.8372], [2.3209], color='darkblue', marker='o', markersize=8, label="Iteration 1 (-1.1568, -0.8372, 2.3209)")

ax.quiver(-1.25, -1, 3.6446, 
          -1.1568 + 1.25, -0.8372 + 1, 2.3209 - 3.6446, 
          arrow_length_ratio=0.1, color='black', linestyle='dashed', label="Descent Path")

ax.plot([-0.8], [-0.7182], [0.8446], color='orange', marker='o', markersize=10, label="Automated Iteration 2 (-0.8, -0.7182, 0.8446)")

ax.quiver(-1.1568, -0.8372, 2.3209, 
          -0.8 + 1.1568, -0.7182 + 0.8372, 0.8446 - 2.3209, 
          arrow_length_ratio=0.1, color='purple', linestyle='solid', label="Automated Descent Path")

fig.colorbar(surface, ax=ax, label='f(x, y, z)')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('f(x, y, z)')
ax.legend()

plt.show()
