import numpy as np
import matplotlib.pyplot as plt

def extended_six_hump_camelback(x, y):
    return ((4 - 2.1 * x**2 + (x**4) / 3) * x**2 + x * y + (4 * y**2 - 4) * y**2)

def gradient_f(x, y):
    dfdx = 8 * x - 8.4 * x**3 + 4 * x**5 / 3 + y
    dfdy = x + 16 * y - 16 * y**3
    return np.array([dfdx, dfdy])

def gradient_descent(func, grad_func, start_point, alpha=0.1, max_iter=1000, tol=1e-6):
    x, y = start_point
    path = [(x, y)]
    
    for _ in range(max_iter):
        grad = grad_func(x, y)
        new_x = x - alpha * grad[0]
        new_y = y - alpha * grad[1]
        
        
        if np.sqrt((new_x - x)**2 + (new_y - y)**2) < tol:
            break
        
        x, y = new_x, new_y
        path.append((x, y))
    
    return np.array(path)

start_point = (-1.25, -1)

path = gradient_descent(extended_six_hump_camelback, gradient_f, start_point, alpha=0.1)

path[1, 1] = -0.4395

x_path, y_path = path[:, 0], path[:, 1]
z_path = extended_six_hump_camelback(x_path, y_path)

x_vals = np.linspace(-2, 2, 400)
y_vals = np.linspace(-1.5, 1.5, 400)
X, Y = np.meshgrid(x_vals, y_vals)

Z = extended_six_hump_camelback(X, Y)

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

surface = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none', alpha=0.8)

fig.colorbar(surface, ax=ax, shrink=0.5, aspect=5)

ax.plot(x_path, y_path, z_path, color='r', marker='o', label='Gradient Descent Path (y-adjusted first step)')

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('f(x, y)')
ax.set_title('Extended Six-Hump Camelback Function with Gradient Descent Path (y-adjusted first step)')

ax.view_init(elev=30, azim=-60)
ax.set_zlim(-1, 5)
ax.set_ylim(-1, 1)

Z_adjusted = np.clip(Z, -1, 5)  # Clip the z-values to stay within the desired range

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

surface = ax.plot_surface(X, Y, Z_adjusted, cmap='viridis', edgecolor='none', alpha=0.8)

ax.plot(x_path, y_path, np.clip(z_path, -1, 5), color='r', marker='o', label='Gradient Descent Path (y-adjusted first step)')

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('f(x, y)')
ax.set_title('Extended Six-Hump Camelback Function with Gradient Descent Path (y-adjusted first step)')

ax.view_init(elev=50, azim=-48)
ax.set_zlim(-1, 5)
ax.set_ylim(-1, 1)

plt.legend()
plt.show()
